#pragma once

#include <opencv2/opencv.hpp>

class CascadeTester
{
public:

    CascadeTester(void); //Constructor. Asks the use to select the test video file, the trained cascade model file, and the test data folder (generated by collect_test_data)
    void run(void); //Runs the CascadeClassifier on each annotated frame and calculates Precision/Recall

private:

    bool parseGroundTruth(const std::string &fileName, std::vector<cv::Rect> &objects) const; //Parses boxes from the annotation file
    uint32_t extractFrameNumberFromFileName(const std::string &filename) const;
    void check(const std::vector<cv::Rect> &detectObjects, const std::vector<cv::Rect> &groundTruth); //Counts and updates TP,FP,and FN
    float IoU(const cv::Rect &a, const cv::Rect &b) const; //Calculates Intersection-over-Union of two boxes

    cv::VideoCapture _cap;
    cv::CascadeClassifier _detector;
    std::string _testFolder;

    uint32_t _TP; //True Positive
    uint32_t _FP; //False Positive
    uint32_t _FN; //False Negative
};
